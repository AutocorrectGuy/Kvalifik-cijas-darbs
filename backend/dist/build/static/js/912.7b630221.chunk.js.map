{"version":3,"file":"static/js/912.7b630221.chunk.js","mappings":"iJAQMA,EAA0C,CAC9CC,OAAQ,CACNC,UAAW,mGACXC,UAAW,iBAEbC,MAAO,CACLF,UAAW,mGACXC,UAAW,gBAEbE,KAAM,CACJH,UAAW,mGACXC,UAAW,gBASTG,EAAY,SAAHC,GAAwD,IAAlDC,EAAQD,EAARC,SAAUC,EAAOF,EAAPE,QAC7B,OAAOC,EAAAA,EAAAA,KAAA,UACLC,QAAS,kBAAMH,GAAU,EACzBN,UAAS,GAAAU,OAAKZ,EAAiBS,GAASP,UAAS,4FAA2FW,SAC3Ib,EAAiBS,GAASN,WAE/B,EA6FA,UAhFoB,SAAHW,GASe,IAR9BD,EAAQC,EAARD,SACAV,EAASW,EAATX,UACAY,EAAiBD,EAAjBC,kBACAC,EAAYF,EAAZE,aACAC,EAAkBH,EAAlBG,mBACAC,EAAaJ,EAAbI,cACAC,EAAmBL,EAAnBK,oBACAC,EAAcN,EAAdM,eAEAC,GAA4BC,EAAAA,EAAAA,WAAkB,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7CI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GAElBI,EAAkB,WAAH,OAASD,GAAU,SAACE,GAAS,OAAMA,CAAS,GAAC,EAS5DC,EAAsB,SAAHC,GAAA,IAAMC,EAAED,EAAFC,GAAIC,EAACF,EAADE,EAAC,OAClCC,EAAAA,EAAAA,MAAA,OAAK/B,UAAU,wCAAuCW,SAAA,EACpDH,EAAAA,EAAAA,KAAA,MAAIR,UAAU,qCAAoCW,SAAEkB,KACpDrB,EAAAA,EAAAA,KAAA,KAAGR,UAAU,iCAAgCW,SAAEmB,MAC3C,EAEFE,EAAe,SAAC1B,GAChBA,GAAUA,IACdmB,GACF,EAEMQ,EAAuB,SAAHC,GAAA,IAAMvB,EAAQuB,EAARvB,SAAUL,EAAQ4B,EAAR5B,SAAQ,OAIhDE,EAAAA,EAAAA,KAAA,OAAKR,UAAU,SAASS,QAAS,kBAAMuB,EAAa1B,EAAS,EAACK,SAC3DA,GACG,EAER,OAAQoB,EAAAA,EAAAA,MAAAI,EAAAA,SAAA,CAAAxB,SAAA,CAELE,GACGL,EAAAA,EAAAA,KAACyB,EAAoB,CAAC3B,SAAUQ,EAAcH,SAC7CE,KAEDL,EAAAA,EAAAA,KAACJ,EAAS,CAACG,QAAQ,OAAOD,SAAU,kBAAM0B,EAAalB,EAAc,IAGxES,IAAUf,EAAAA,EAAAA,KAAA,OACTR,UAAU,6EACVS,QAAS,SAAC2B,GAAC,OArCQ,SAACA,GAClBA,EAAEC,SAAWD,EAAEE,gBACbtB,GAAeA,IACnBS,IAEJ,CAgCoBc,CAAeH,EAAE,EAACzB,UAElCH,EAAAA,EAAAA,KAAA,OAAKR,UAAU,gDAA+CW,UAC5DoB,EAAAA,EAAAA,MAAA,OAAK/B,UAAU,oDAAmDW,SAAA,CAC/DV,IAAaO,EAAAA,EAAAA,KAACmB,EAAmB,CAACE,GAAI5B,EAAU4B,GAAIC,EAAG7B,EAAU6B,IACjEnB,GACDoB,EAAAA,EAAAA,MAAA,OAAK/B,UAAU,0CAAyCW,SAAA,EACtDH,EAAAA,EAAAA,KAAA,OAAKR,UAAU,UAASW,SACrBM,GACGT,EAAAA,EAAAA,KAACyB,EAAoB,CAAC3B,SAAUY,EAAgBP,SAC/CM,KAEDT,EAAAA,EAAAA,KAACJ,EAAS,CAACG,QAAQ,SAASD,SAAU,kBAAM0B,EAAad,EAAgB,MAG9EH,GACGP,EAAAA,EAAAA,KAACyB,EAAoB,CAAC3B,SAAUU,EAAeL,SAC9CI,KAEDP,EAAAA,EAAAA,KAACJ,EAAS,CAACG,QAAQ,QAAQD,SAAU,kBAAM0B,EAAahB,EAAe,gBAQvF,C","sources":["components/PopupButton.tsx"],"sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { useState } from 'react'\r\n\r\ntype popButtonType = 'open' | 'close' | 'accept'\r\ntype DEFAULT_POP_OPTS_TYPE = { [K in popButtonType]: {\r\n  [J in 'innerText' | 'className']: string\r\n} }\r\nconst DEFAULT_BTN_OPTS: DEFAULT_POP_OPTS_TYPE = {\r\n  accept: {\r\n    className: 'bg-gray-700 text-gray-300 border-gray-500 hover:text-white hover:bg-gray-600 focus:ring-gray-600',\r\n    innerText: 'Akceptēt'\r\n  },\r\n  close: {\r\n    className: 'bg-gray-700 text-gray-300 border-gray-500 hover:text-white hover:bg-gray-600 focus:ring-gray-600',\r\n    innerText: 'Aizvērt'\r\n  },\r\n  open: {\r\n    className: 'bg-gray-700 text-gray-300 border-gray-500 hover:text-white hover:bg-gray-600 focus:ring-gray-600',\r\n    innerText: 'Atvērt'\r\n  }\r\n}\r\n\r\ntype DefaultCloseButtonProps = {\r\n  callback: () => void\r\n  btnType: popButtonType\r\n}\r\n\r\nconst PopButton = ({ callback, btnType }: DefaultCloseButtonProps) => {\r\n  return <button\r\n    onClick={() => callback()}\r\n    className={`${DEFAULT_BTN_OPTS[btnType].className} py-2 px-4 w-full text-sm font-medium rounded-lg sm:w-auto focus:outline-none focus:z-10`}>\r\n    {DEFAULT_BTN_OPTS[btnType].innerText}\r\n  </button>\r\n}\r\n\r\ntype PopupProps = {\r\n  children?: React.ReactNode\r\n  innerText?: { h1: string; p: string }\r\n  OpenButtonElement?: JSX.Element\r\n  onButtonOpen?: () => void\r\n  CloseButtonElement?: JSX.Element\r\n  onButtonClose?: () => void\r\n  AcceptButtonElement?: JSX.Element\r\n  onButtonAccept?: () => void\r\n}\r\n\r\nconst PopupButton = ({\r\n  children,\r\n  innerText,\r\n  OpenButtonElement,\r\n  onButtonOpen,\r\n  CloseButtonElement,\r\n  onButtonClose,\r\n  AcceptButtonElement,\r\n  onButtonAccept\r\n}: PopupProps): JSX.Element => {\r\n  const [isOpen, setIsOpen] = useState<boolean>(false)\r\n\r\n  const changeOpenState = () => setIsOpen((openState) => !openState)\r\n\r\n  const onBgClickClose = (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\r\n    if (e.target === e.currentTarget) {\r\n      if (onButtonClose) onButtonClose()\r\n      changeOpenState()\r\n    }\r\n  }\r\n\r\n  const DefaultInnerElement = ({ h1, p }: { h1: string, p: string }) =>\r\n    <div className=\"mb-4 text-sm font-light text-gray-400\">\r\n      <h3 className=\"mb-3 text-2xl font-bold text-white\">{h1}</h3>\r\n      <p className='text-sm min-h-[94px] max-h-fit'>{p}</p>\r\n    </div>\r\n\r\n  const handleButton = (callback: () => void) => {\r\n    if (callback) callback()\r\n    changeOpenState()\r\n  }\r\n\r\n  const DefaultButtonWrapper = ({ children, callback }: {\r\n    children: React.ReactNode,\r\n    callback: () => void\r\n  }): JSX.Element =>\r\n    <div className='h-full' onClick={() => handleButton(callback)}>\r\n      {children}\r\n    </div>\r\n\r\n  return (<>\r\n    {/** Open Button Element */}\r\n    {OpenButtonElement\r\n      ? <DefaultButtonWrapper callback={onButtonOpen!}>\r\n        {OpenButtonElement}\r\n      </DefaultButtonWrapper>\r\n      : <PopButton btnType='open' callback={() => handleButton(onButtonOpen!)} />\r\n    }\r\n    {/** The Popup overlay */}\r\n    {isOpen && <div\r\n      className=\"fixed inset-0 flex items-center justify-center z-50 bg-opacity-80 bg-black\"\r\n      onClick={(e) => onBgClickClose(e)}\r\n    >\r\n      <div className=\"relative p-4 w-full max-w-lg h-full md:h-auto\">\r\n        <div className=\"relative p-4 rounded-lg shadow bg-gray-800 md:p-8\">\r\n          {innerText && <DefaultInnerElement h1={innerText.h1} p={innerText.p} />}\r\n          {children}\r\n          <div className=\"flex items-center flex-row-reverse pt-0\">\r\n            <div className='sm:ml-2'>\r\n              {AcceptButtonElement\r\n                ? <DefaultButtonWrapper callback={onButtonAccept!}>\r\n                  {AcceptButtonElement}\r\n                </DefaultButtonWrapper>\r\n                : <PopButton btnType='accept' callback={() => handleButton(onButtonAccept!)} />\r\n              }\r\n            </div>\r\n            {CloseButtonElement\r\n              ? <DefaultButtonWrapper callback={onButtonClose!}>\r\n                {CloseButtonElement}\r\n              </DefaultButtonWrapper>\r\n              : <PopButton btnType='close' callback={() => handleButton(onButtonClose!)} />\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    }\r\n  </>)\r\n}\r\n\r\nexport default PopupButton"],"names":["DEFAULT_BTN_OPTS","accept","className","innerText","close","open","PopButton","_ref","callback","btnType","_jsx","onClick","concat","children","_ref2","OpenButtonElement","onButtonOpen","CloseButtonElement","onButtonClose","AcceptButtonElement","onButtonAccept","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","changeOpenState","openState","DefaultInnerElement","_ref3","h1","p","_jsxs","handleButton","DefaultButtonWrapper","_ref4","_Fragment","e","target","currentTarget","onBgClickClose"],"sourceRoot":""}